##1114
스프링 시작

책 추천; 토비의 스프링 버전 상관없음, 스프링 인 앤션 (E.4)

스프링 자체는 MVC, DAO가 없다
스프링 프레임워크를 기반으로 스프링 MVC, 스프링 DAO를 추가한 것

servlet은 tomcat이 관리 ->servlet container
여러 개의 DAO는 EJB(Enterprise Java Bean)가 관리  ->EJB container

WAS의 기능
- servlet container
- EJB container  -> 문제발생  ->Spring container가 해결

JAVA로 애플리케이션 프레임워크 (WEB, Console, DataBase 등으로 한정짓지 않음)

Spring container 안에 POJO(Plain Old JAVA Object) 들어있음

Spring Framwork 자체는 Spring container를 가르킨다.
   ≒ Bean Factory, Application Context, DI container(Dependency Injection),
      IoC Container(Inversion of Control, 제어의 역전), IoC/DI container

Spring MVC를 도와주는 bean들이 존재함 + 내가 만든 bean -> Spring container(Spring core library)

앞으로 Servlet container, Spring container(Spring MVC를 도와주는 bean, 내가 만든 bean) 2개 존재

1. 라이브러리 추가
2. 설정
3. MVC 작성


POJO = AOP + PSA + IoC/DI
현재 POJO 기반으로 프로그래밍

---------------------------------------------
02. spirng

- init-service-doGet

1. init()
- 요청이 들어오면 TOMCAT프로그램 아래로 /helloweb03에 DispatcherServlet 만들어 "/" 전부 받기(세팅 필요)
- config = "/WEB-INF/spring-servlet.xml"
  new WebXmlApplication Context();
- init() 실행 시 Spring Container(Web Application Context(interface)라고 함) 생성
- 그 안에 Handler Mapping 객체 생성 후 request를 handle함
객체 안에 'url, controller, name, param, @ReponseBody(유무 확인 필요)' 객체를 갖고 있음
그 객체를 Hello Controller가 @__ 활용하여 사용함.

2. service()

3. doGet(request, response)
request.getRequestPath()  -> /helloweb03/hello?a=~ 나옴  ('a' 이름 잘 정해야함)

* Web Application Context(=MVC) 안에 Spring MVC를 도와주는 3가지
Handler Mapping
View Resolver
Message Converter


##1115

스프링 설정 = bean 설정(객체 설정)
spring-servlet.xml
annotation config; @으로 bean, 즉 객체를 설정하겠다; java, xml로 설정 가능
  -> = scanning 기술(reflection) 기반
  -> = Auto Config
  cf. 수동 Config; <bean  class = " ">, property
 EX) @__________ ; @Conponent, @Controller, @Repository

C.M()  =  ModelAndView
vr.resolve((String) ViewName)

***
tomcat이 실행되면 web.xml이 loading됨.
1.init()
web.xml에 아래 2가지 설정해야함.
CharacterEncodingFilter
ContextLoadListener가 생성이 됨  -> contextInitialized(method) 제공함
  ① contextConfigLocation= "/ooo.xml"
  ② new ClassPathXmlApplicationContext()  => Root Application Context 생성됨.
Root Application Context에 DAO 생성됨

요청이 들어오면 TOMCAT프로그램 아래로 /helloweb03에 DispatcherServlet 만들어 "/" 전부 받기(세팅 필요)
init() 실행 시 Web Application Context(interface) 생성됨
Web Application Context 안에 Handler Mapping, View Resolver, Message Converter, Controller 존재함
Controller 생성과 함께 spring-servlet.xml 만들기
Root Application Context에 DAO가 Web Application Context DAO로 DI 발생

2. service()

3. doGet(request, response)

com.bitacademy.emaillist.controller
|- EmaillistController
com.bitacademy.emaillist.repository
|- EmaillistRepository
com.bitacademy.emaillist.vo
|- EmaillistVo


com.bitacademy.guestbook.controller
|- GuestbookController
com.bitacademy.guestbook.repository
|- GuestbookRepository
com.bitacademy.guestbook.vo
|- GuestbookVo